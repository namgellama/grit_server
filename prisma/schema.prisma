// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Segment {
  MEN
  WOMEN
  UNISEX
}

enum Role {
  Admin
  Customer
}

enum AddressType {
  UserAddress
  DeliveryAddress
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH
  ESEWA
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Category {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  image     String   @default("") @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Product {
  id           String      @id @default(uuid())
  name         String      @db.VarChar(255)
  description  String      @db.Text
  sellingPrice Int         @default(0)
  crossedPrice Int         @default(0)
  costPerItem  Int         @default(0)
  segment      Segment     @default(MEN)
  isNew        Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  categoryId   String
  orderItems   OrderItem[]
  bagItems     BagItem[]
  variants     Variant[]

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Variant {
  id        String @id @default(uuid())
  color     String
  hexColor  String @default("")
  size      String
  image     String
  stock     Int    @default(10)
  productId String

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  email       String?  @unique
  phoneNumber String   @unique @default("") @db.VarChar(10)
  password    String
  role        Role     @default(Customer)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders   Order[]
  bagItems BagItem[]
}

model Address {
  id           String  @id @default(uuid())
  addressLine1 String  @db.VarChar(255)
  addressLine2 String  @db.VarChar(255)
  city         String  @db.VarChar(50)
  postalCode   String? @db.VarChar(10)
  country      String  @default("Nepal") @db.VarChar(50)

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @unique
}

model BagItem {
  id             String   @id @default(uuid())
  size           String
  color          String
  unitPrice      Int      @default(0)
  quantity       Int      @default(0)
  unitTotalPrice Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model OrderItem {
  id             String   @id @default(uuid())
  quantity       Int
  unitPrice      Int      @default(0)
  unitTotalPrice Int
  size           String   @default("-")
  color          String   @default("-")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
}

model Order {
  id             String      @id @default(uuid())
  subTotal       Int         @default(0)
  deliveryCharge Int         @default(0)
  total          Int         @default(0)
  status         OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  orderItems OrderItem[]
  address    Address?
  payment    Payment?
}

model Payment {
  id        String        @id @default(uuid())
  amount    Int
  method    PaymentMethod @default(CASH)
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId String? @unique
}
